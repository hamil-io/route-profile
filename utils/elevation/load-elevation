#!/bin/bash

# Test for getopt
getopt --test > /dev/null
if [ $? -ne 4 ]; then
    echo "Iâ€™m sorry, `getopt --test` failed in this environment."
    exit 1
fi

# Find source directory of this script
BASE=$(pwd)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

show_help () {
    usage="load-elevation -- Program to load SRTMGL1 tiles. Requires a NASA Earthdata login.

Usage: load-elevation -u user -p password [OPTION...]

Where:

    -h                                 Show this help text
    -u, --user=USERNAME                Username for NASA Earthdata
    -p, --password=PASSWORD            Password for NASA Earthdata
    -c, --continent=CONTINENT          Continent you would like to load, available values are:
                                           Africa, Australia, Eurasia, North_America, South_America
    -o, --out=FILE                     Desired output file, defaults to ./elevation.sql
    -t, --table=TABLE                  Desired table name, defaults to elevation
    -s, --size=SIZE                    Tile size to pass to raster2pgsql, defaults to 30x30

    Constraints:
        --latitude-min=[-90, 90]       Minimum latitude you would like to load
        --latitude-max=[-90, 90]       Maximum latitude you would like to load
        --longitude-min=[-180, 180]    Minimum longitude you would like to load
        --longitude-max=[-180, 180]    Maximum longitude you would like to load"
        
    echo "$usage"
}

parse_coord() {
    in="$1"
    parsed=""
    lead=$(echo $in | cut -c 1)

    if [ "$lead" == "S" ] || [ "$lead" == "W" ]; then
        lead="-"
    else
        lead=""
    fi

    parsed="$lead"
    parsed+=$(echo $in | cut -c 2-)
}

table="elevation"
output="elevation.sql"
size="30x30"

lon_min="-180"
lon_max="180"
lat_min="-90"
lat_max="90"

SHORT="c:u:p:o:t:s:h"
LONG="continent:,user:,password:,help,latitude-min:,latitude-max:,longitude-min:,longitude-max:,out:,table:,:size:"

PARSED=$(getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@")
if [ $? -ne 0 ]; then
    exit 2
fi

eval set -- "$PARSED"

while true; do
    case "$1" in
        -h|--help)
            show_help
            exit
            ;;
        -c|--continent)
            continent=$2
            shift 2
            ;;
        -u|--user)
            user=$2
            shift 2
            ;;
        -p|--password)
            pass=$2
            shift 2
            ;;
        -o|--out)
            output=$2
            shift 2
            ;;
        -t|--table)
            table=$2
            shift 2
            ;;
        -s|--size)
            size=$2
            shift 2
            ;;
        --latitude-min)
            lat_min=$2
            shift 2
            ;;
        --latitude-max)
            lat_max=$2
            shift 2
            ;;
        --longitude-min)
            lon_min=$2
            shift 2
            ;;
        --longitude-max)
            lon_max=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Unrecognized Option: $1"
            exit 3
            ;;
    esac
done

if [ -z "$user" ]; then
    echo "Username must be set, use -h for help"
    exit 3;
fi

if [ -z "$pass" ]; then
    echo "Password must be set, use -h for help"
    exit 3;
fi

# initialize tmp directory for tiles
mkdir -p /tmp/route-profile/elevation
cd /tmp/route-profile/elevation

input="$DIR/tile.urls"

# test to see if user/pass is correct
echo "Testing server connection..."
test_tile=$(head -n 1 $input)
test_resp=$(wget -O /dev/null --quiet --user $user --password $pass $test_tile  2>&1)

if [ "$?" -gt 0 ]; then
    echo "Unable to connect to server, check the username and password"
    exit 3
fi

# filter the specified tiles

filter() {
    lon_degree=$(echo $1 | cut -c 57-59)
    lat_degree=$(echo $1 | cut -c 60-63)

    parse_coord $lat_degree
    lat_degree=$parsed

    parse_coord $lon_degree
    lon_degree=$parsed

    if [ "$lat_degree" -ge "$lat_min" ] &&
       [ "$lat_degree" -le "$lat_max" ] &&
       [ "$lon_degree" -ge "$lon_min" ] &&
       [ "$lon_degree" -le "$lon_max" ]; then
        echo $1 >> tile.list
    fi
}

echo "Reading tile list..."
> tile.list
> downloaded.list

while IFS= read -r var
do
    filter $var &
done < "$input"

total=$(wc -l < tile.list)

echo "Preparing to download $total tiles..."
echo
< tile.list xargs -n 1 -P 16 -I {} -- sh -c "wget --quiet --user $user --password $pass {}; echo {} >> downloaded.list; echo Downloaded \$(wc -l < downloaded.list)/$total: {};"

echo
echo "Decompressing tiles..."
echo
unzip "*.zip"

echo
echo "Converting tiles to SQL..."
echo

CUR=$(pwd)
pattern="$CUR/*.hgt"
files=( $pattern )

cd $BASE
raster2pgsql -p -I -M "${files[0]}" $table > $output
for f in $pattern; do raster2pgsql -a -Y -t $size $f $table >> $output; done

echo 
echo "Cleaning up..."
rm /tmp/route-profile/elevation/*
echo "Finished!"
